val comp(f, g) = lambda (x) f(g(x)) ;;

rec map(f) = lambda (xs)
    (if xs = nil
    then nil
    else f(head(xs)):map(f)(tail(xs))) ;;

rec filter(p) = lambda (xs)
    (if xs = nil
    then nil
    else 
        if (p(head(xs)))
        then head(xs):filter(p)(tail(xs))
        else filter(p)(tail(xs))) ;;

--val BK_addOne(x) = x + 1 ;;

--val BK_addTwo(x) = x + 2 ;;

--val BK_isOdd(x) = 
--    if x mod 2 = 0 
--    then false
--    else true ;;

rec reverse1 = lambda (xs, ys)
    if xs = nil
    then ys
    else reverse1(tail(xs), head(xs):ys) ;;

val BK_id(x) = x ;;


val BK_tail(xs) = if xs = nil then nil else tail(xs) ;;

val BK_reverse(xs) = reverse1(xs, nil) ;;

-- Target program
--   target = gen1.gen2 
--   gen2 = reverse.gen5
--   gen5 = map reverse 
--   gen1 = gen2.gen9   
--   gen9 = tl.gen12
--   gen12 = map tl

NEx (list(list(1,2), list(1,2,3,4))) => list(list(5)) ;;
NEx (list(list(1,2,5), list(2))) => list(list(1,2,3,4)) ;;
PEx (list(list(1,2,3),list(2,3),list(3,4))) => list(list(1,2), list(2)) ;;
PEx (list(list(5,6), list(6))) => list(list(5)) ;;
Synthesize ([[Int]]) => [[Int]] ;;
