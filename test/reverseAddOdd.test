val comp(f, g) = lambda (x) f(g(x)) ;;

rec map(f) = lambda (xs)
    (if xs = nil
    then nil
    else f(head(xs)):map(f)(tail(xs))) ;;

rec filter(p) = lambda (xs)
    (if xs = nil
    then nil
    else 
        if (p(head(xs)) = true)
        then head(xs):filter(p)(tail(xs))
        else filter(p)(tail(xs))) ;;

val BK_addOne(x) = x + 1;;

val BK_addTwo(x) = x + 2;;

val BK_isOdd(x) = 
    if x mod 2 = 0 
    then false
    else true;;

rec reverse1(xs, ys) = 
    if xs = nil
    then ys
    else reverse1(tail(xs), head(xs):ys);;

val BK_reverse(xs) = reverse1(xs, nil);;

-- Target program
--   target = reverse.gen2
--   gen2 = gen4.gen4
--   gen4 = gen6.gen7
--   gen7 = map addTwo
--   gen6 = filter isOdd

NEx (list(1,2,3)) => list(5,4) ;;
NEx (list(1,2,3)) => list(5,4) ;;
PEx (list(1,2,3,4)) => list(7,5) ;;
PEx (list(5,6,7)) => list(11,9) ;;
Synthesize ([Int]) => [Int];;
